!function(e){var t={};function r(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(o,s,function(t){return e[t]}.bind(null,s));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=164)}({164:function(e,t,r){"use strict";var o=r(2)(r(165));addEventListener("message",e=>{const{board:t,side:r}=e.data,s=new o.default(t,r);postMessage({move:s.run()[0]})},!1)},165:function(e,t,r){"use strict";var o=r(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=o(r(49)),n=o(r(166));t.default=class extends s.default{constructor(e,t){super(e,t),this.redEval=this.whiteEval=n.default,this.level=8}evaluate(){return(1===this.side?this.redEval:this.whiteEval).evaluate(this.board)}run(){const e=1===this.side?this.redEval:this.whiteEval;return this.loop(this.level,e)}loop(e,t){const{board:r,side:o}=this;let s,n,i=1/0*-o;const l=this.findJumps();if(l.length)for(let r=0;r<l.length;++r){const u=l[r];this.withJump(u,()=>{this.side=-o,n=this.loop(e-1,t)[1],this.side=o}),(1===o&&n>i||-1===o&&n<i)&&(s=u,i=n)}else if(n=t.evaluate(r),e<=0)i=n;else{const r=this.findMoves();for(let l=0;l<r.length;++l){const u=r[l];this.withMove(u,()=>{this.side=-o,n=this.loop(e-1,t)[1],this.side=o}),(1===o&&n>i||-1===o&&n<i)&&(s=u,i=n)}}return[s,i]}}},166:function(e,t,r){"use strict";var o=r(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const s=new(o(r(167)).default);s.addFormation([[0,0,1]],[[0,0,0,0,0,0,0,0],[50,0,50,0,50,0,50,0],[0,50,0,50,0,50,0,50],[50,0,50,0,50,0,50,0],[0,50,0,50,0,50,0,50],[50,0,50,0,50,0,50,0],[0,50,0,50,0,50,0,50],[50,0,50,0,50,0,50,0]].reverse()),s.addFormation([[0,0,2]],[[0,60,0,60,0,60,0,60],[60,0,60,0,60,0,60,0],[0,60,0,60,0,60,0,60],[60,0,60,0,60,0,60,0],[0,60,0,60,0,60,0,60],[60,0,60,0,60,0,60,0],[0,60,0,60,0,60,0,60],[60,0,60,0,60,0,60,0]].reverse()),s.addFormation([[0,0,3],[1,-1,3]],[[0,12,0,8,0,0,0,0],[12,0,10,0,6,0,0,0],[0,10,0,8,0,4,0,0],[8,0,8,0,6,0,2,0],[0,6,0,6,0,4,0,0],[0,0,4,0,4,0,2,0],[0,0,0,2,0,2,0,0],[0,0,0,0,0,0,0,0]].reverse()),s.addFormation([[0,0,3],[1,-1,3],[2,-2,3]],[[0,12,0,8,0,0,0,0],[12,0,10,0,6,0,0,0],[0,10,0,8,0,4,0,0],[8,0,8,0,6,0,0,0],[0,6,0,6,0,4,0,0],[0,0,4,0,4,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]].reverse()),s.addFormation([[0,0,3],[1,-1,3],[-1,-1,3]],[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,12,0,8,0,4,0],[0,8,0,12,0,8,0,0],[0,0,8,0,12,0,8,0],[0,4,0,12,0,12,0,0],[0,0,0,0,0,0,0,0]].reverse()),s.addFormation([[0,0,3],[-1,-1,3]],[[0,0,0,0,0,10,0,16],[0,0,0,0,8,0,12,0],[0,0,0,6,0,10,0,10],[0,0,4,0,8,0,8,0],[0,2,0,6,0,6,0,0],[0,0,4,0,4,0,0,0],[0,2,0,2,0,0,0,0],[0,0,0,0,0,0,0,0]].reverse()),s.addFormation([[0,0,3],[-1,-1,3],[-2,-2,3]],[[0,0,0,0,0,10,0,16],[0,0,0,0,8,0,12,0],[0,0,0,6,0,10,0,10],[0,0,4,0,8,0,8,0],[0,0,0,6,0,6,0,0],[0,0,4,0,4,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]].reverse());var n=s;t.default=n},167:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=class{constructor(){this.rules=[[],[],[],[],[],[],[],[]]}addFormation(e,t){const r=this.rules;for(let o=0;o<8;++o)for(let s=0;s<8;++s){const n=t[o][s];0!==n&&(r[o][s]=r[o][s]||[],r[o][s].push([e,n]))}}evaluate(e){const{rules:t}=this;let r=0;for(let o=0;o<8;++o)for(let s=0;s<8;++s){const n=t[o][s];if(n)for(let t=0;t<n.length;++t){const[i,l]=n[t];let u;u=!0;for(let t=0;t<i.length;++t){const[r,n,l]=i[t],d=e[o+n][s+r];if((0!==l||0!==d)&&(1!==l&&3!==l||1!==d)&&(2!==l&&3!==l||2!==d)&&(-1!==l&&-3!==l||-1!==d)&&(-2!==l&&-3!==l||-2!==d)){u=!1;break}}u&&(r+=l),u=!0;for(let t=0;t<i.length;++t){const[r,n,l]=i[t],d=e[(7^o)-n][(7^s)-r];if((0!==l||0!==d)&&(1!==l&&3!==l||-1!==d)&&(2!==l&&3!==l||-2!==d)&&(-1!==l&&-3!==l||1!==d)&&(-2!==l&&-3!==l||2!==d)){u=!1;break}}u&&(r-=l)}}return r}}},2:function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},49:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=class{constructor(e,t){this.board=e,this.side=t}findJumps(){const{board:e,side:t}=this,r=1===t?7:0,o=r+t,s=7^r,n=[];for(let r=s;r!==o;r+=t)for(let i=s;i!==o;i+=t){t*e[r][i]>0&&this.nextJump([[i,r]],n)}return n}nextJump(e,t){const{board:r,side:o}=this,[s,n]=e[e.length-1],i=r[n][s],l=1===o?7:0,u=i===2*o;let d=!1;for(let a=u?-1:1;3!==a;a+=2)for(let f=-1;3!==f;f+=2){let c,h,v,p;if(1===o?(v=(c=s+f)+f,p=(h=n+a)+a):(v=(c=s-f)-f,p=(h=n-a)-a),v>=0&&v<8&&p>=0&&p<8){const a=r[h][c];if(0===r[p][v]&&o*a<0){const o=!u&&p===l;d=!0,r[n][s]=0,r[h][c]=0,r[p][v]=o?2*i:i,e.push([v,p,c,h]),!o&&this.nextJump(e,t)||t.push(e.slice()),e.pop(),r[n][s]=i,r[h][c]=a,r[p][v]=0}}}return d}withJump(e,t){const{board:r,side:o}=this,s=e.length,[n,i]=e[0],[l,u]=e[s-1],d=r[i][n],a=d===o&&u===(1===o?7:0),f=new Array(s);f[0]=d,r[i][n]=0;for(let t=1;t<s;++t){const[,,o,s]=e[t];f[t]=r[s][o],r[s][o]=0}r[u][l]=a?2*d:d,t(),r[u][l]=0;for(let t=s-1;t>0;--t){const[,,o,s]=e[t];r[s][o]=f[t]}r[i][n]=d}findMoves(){const{board:e,side:t}=this,r=1===t?7:0,o=r+t,s=7^r,n=[];for(let i=s;i!==o;i+=t)for(let l=s;l!==o;l+=t){const o=e[i][l],s=o===2*t;if(t*o>0)for(let u=s?-1:1;3!==u;u+=2)for(let d=-1;3!==d;d+=2){let a,f;if(1===t?(a=l+d,f=i+u):(a=l-d,f=i-u),a>=0&&a<8&&f>=0&&f<8){const t=!s&&f===r;0===e[f][a]&&(e[i][l]=0,e[f][a]=t?2*o:o,n.push([[l,i],[a,f]]),e[i][l]=o,e[f][a]=0)}}}return n}withMove(e,t){const{board:r,side:o}=this,[[s,n],[i,l]]=e,u=r[n][s],d=u===o&&l===(1===o?7:0);r[n][s]=0,r[l][i]=d?2*u:u,t(),r[l][i]=0,r[n][s]=u}findPlays(){const e=this.findJumps();return e.length?e:this.findMoves()}buildTree(){const e=this.findPlays(),t={};for(let r=0;r<e.length;++r){const o=e[r];let s=t;for(let e=0;e<o.length;++e){const[t,r]=o[e],n=`${t},${r}`;s[n]=s[n]||{},s=s[n]}}return t}}}});